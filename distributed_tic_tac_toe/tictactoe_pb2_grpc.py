# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import tictactoe_pb2 as tictactoe__pb2


class BerkeleyClockStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetDateTime = channel.unary_unary(
                '/BerkeleyClock/GetDateTime',
                request_serializer=tictactoe__pb2.DateTimeRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.DateTimeResponse.FromString,
                )
        self.SyncClock = channel.unary_unary(
                '/BerkeleyClock/SyncClock',
                request_serializer=tictactoe__pb2.ClockAdjustmentRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.DateTimeResponse.FromString,
                )


class BerkeleyClockServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetDateTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SyncClock(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BerkeleyClockServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetDateTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDateTime,
                    request_deserializer=tictactoe__pb2.DateTimeRequest.FromString,
                    response_serializer=tictactoe__pb2.DateTimeResponse.SerializeToString,
            ),
            'SyncClock': grpc.unary_unary_rpc_method_handler(
                    servicer.SyncClock,
                    request_deserializer=tictactoe__pb2.ClockAdjustmentRequest.FromString,
                    response_serializer=tictactoe__pb2.DateTimeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BerkeleyClock', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BerkeleyClock(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetDateTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BerkeleyClock/GetDateTime',
            tictactoe__pb2.DateTimeRequest.SerializeToString,
            tictactoe__pb2.DateTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SyncClock(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BerkeleyClock/SyncClock',
            tictactoe__pb2.ClockAdjustmentRequest.SerializeToString,
            tictactoe__pb2.DateTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class BullyElectionStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartElection = channel.unary_unary(
                '/BullyElection/StartElection',
                request_serializer=tictactoe__pb2.StartElectionRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.StartElectionResponse.FromString,
                )
        self.GetLeader = channel.unary_unary(
                '/BullyElection/GetLeader',
                request_serializer=tictactoe__pb2.GetLeaderRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.GetLeaderResponse.FromString,
                )
        self.Heartbeat = channel.unary_unary(
                '/BullyElection/Heartbeat',
                request_serializer=tictactoe__pb2.HeartbeatRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.HeartbeatResponse.FromString,
                )


class BullyElectionServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartElection(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetLeader(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_BullyElectionServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartElection': grpc.unary_unary_rpc_method_handler(
                    servicer.StartElection,
                    request_deserializer=tictactoe__pb2.StartElectionRequest.FromString,
                    response_serializer=tictactoe__pb2.StartElectionResponse.SerializeToString,
            ),
            'GetLeader': grpc.unary_unary_rpc_method_handler(
                    servicer.GetLeader,
                    request_deserializer=tictactoe__pb2.GetLeaderRequest.FromString,
                    response_serializer=tictactoe__pb2.GetLeaderResponse.SerializeToString,
            ),
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=tictactoe__pb2.HeartbeatRequest.FromString,
                    response_serializer=tictactoe__pb2.HeartbeatResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BullyElection', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class BullyElection(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartElection(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BullyElection/StartElection',
            tictactoe__pb2.StartElectionRequest.SerializeToString,
            tictactoe__pb2.StartElectionResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetLeader(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BullyElection/GetLeader',
            tictactoe__pb2.GetLeaderRequest.SerializeToString,
            tictactoe__pb2.GetLeaderResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/BullyElection/Heartbeat',
            tictactoe__pb2.HeartbeatRequest.SerializeToString,
            tictactoe__pb2.HeartbeatResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TicTacToeStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartGame = channel.unary_unary(
                '/TicTacToe/StartGame',
                request_serializer=tictactoe__pb2.StartGameRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.StartGameResponse.FromString,
                )
        self.SetSymbol = channel.unary_unary(
                '/TicTacToe/SetSymbol',
                request_serializer=tictactoe__pb2.SetSymbolRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.SetSymbolResponse.FromString,
                )
        self.ListBoard = channel.unary_unary(
                '/TicTacToe/ListBoard',
                request_serializer=tictactoe__pb2.ListBoardRequest.SerializeToString,
                response_deserializer=tictactoe__pb2.ListBoardResponse.FromString,
                )


class TicTacToeServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StartGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetSymbol(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListBoard(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TicTacToeServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartGame': grpc.unary_unary_rpc_method_handler(
                    servicer.StartGame,
                    request_deserializer=tictactoe__pb2.StartGameRequest.FromString,
                    response_serializer=tictactoe__pb2.StartGameResponse.SerializeToString,
            ),
            'SetSymbol': grpc.unary_unary_rpc_method_handler(
                    servicer.SetSymbol,
                    request_deserializer=tictactoe__pb2.SetSymbolRequest.FromString,
                    response_serializer=tictactoe__pb2.SetSymbolResponse.SerializeToString,
            ),
            'ListBoard': grpc.unary_unary_rpc_method_handler(
                    servicer.ListBoard,
                    request_deserializer=tictactoe__pb2.ListBoardRequest.FromString,
                    response_serializer=tictactoe__pb2.ListBoardResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TicTacToe', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TicTacToe(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StartGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/StartGame',
            tictactoe__pb2.StartGameRequest.SerializeToString,
            tictactoe__pb2.StartGameResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetSymbol(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/SetSymbol',
            tictactoe__pb2.SetSymbolRequest.SerializeToString,
            tictactoe__pb2.SetSymbolResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListBoard(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TicTacToe/ListBoard',
            tictactoe__pb2.ListBoardRequest.SerializeToString,
            tictactoe__pb2.ListBoardResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
